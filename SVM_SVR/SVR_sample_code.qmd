---
title: Support Vector Regression (SVR)
format: gfm
warning: false 
toc: true 
fig-height: 7
fig-width: 7
---



```{r} 
#| include: false 


library (reticulate)
path <- Sys.which("python")
path <- gsub("\\", "//", path, fixed = TRUE)
use_python(path)


```


<br><br><br> 

# Using python 

***


## loading require libraries 

```{python} 
import numpy as np 
import matplotlib.pyplot as plt 
from sklearn.svm import SVR 
import matplotlib.animation as animation  
from celluloid import Camera
```


## Generate data 

```{python} 
np.random.seed(1234)
xx = np.sort(5 * np.random.rand(40, 1), axis = 0)
# xx
yy = np.sin(xx).flatten()
# yy
```



### add noise to data 

```{python} 
np.random.seed(1234)
err = np.random.rand(40)
yy += err 
```


## Fit SVR Model with linear kernel 

```{python} 
#| eval: false

Tol = [0.01, 0.05, 0.1, 0.2, 0.5, 1, 5]


fig = plt.figure(figsize = (9, 9))
camera = Camera(fig)

for k in Tol: 
    Model_temp = SVR(kernel = 'linear', tol = k)
    Model_temp.fit(xx, yy)
    pred = Model_temp.predict(xx) 
    plt.scatter(x = xx, y = yy, color = 'red', s = 50)
    snapp = plt.plot(xx, pred)
    plt.legend(snapp, [f'Tolerance:{k}'])
    camera.snap() 
# animation = camera.animate()

animation = camera.animate(interval=500, blit=True)  
animation.save('animation1.gif', writer='ffmpeg', fps = 1.5)  
plt.show()

```



![see this gif](animation1.gif)



***
***

## fit SVR Model with poly kernel

```{python}


fig = plt.figure(figsize = (9, 9))
camera = Camera(fig)

for k in Tol: 
    Model_temp = SVR(kernel = 'poly', tol = k)
    Model_temp.fit(xx, yy)
    pred = Model_temp.predict(xx) 
    plt.scatter(x = xx, y = yy, color = 'red', s = 50)
    snapp = plt.plot(xx, pred)
    plt.legend(snapp, [f'Tolerance:{k}'])
    camera.snap() 
# animation = camera.animate()

animation = camera.animate(interval=500, blit=True)  
animation.save('animation2.gif', writer='ffmpeg', fps = 1.5)  
plt.show()


```


![see this gif](animation2.gif)

***
***




## fit SVR Model with radial kernel

```{python}


fig = plt.figure(figsize = (9, 9))
camera = Camera(fig)

for k in Tol: 
    Model_temp = SVR(kernel = "rbf", tol = k, gamma = 0.1)
    Model_temp.fit(xx, yy)
    pred = Model_temp.predict(xx) 
    plt.scatter(x = xx, y = yy, color = 'red', s = 50)
    snapp = plt.plot(xx, pred)
    plt.legend(snapp, [f'Tolerance:{k}'])
    camera.snap() 
# animation = camera.animate()

animation = camera.animate(interval=500, blit=True)  
animation.save('animation3.gif', writer='ffmpeg', fps = 1.5)  
plt.show()


```


![see this gif](animation3.gif)


***
***
***


# Using R Programming 

***


## fit SVR Model with linear kernel

```{r}
#| eval: false 


library(e1071)
library(ggplot2) 
library(gganimate)

xR <- py$xx
yR <- py$yy 
tols <- py$Tol |> unlist()

Models = list()
j <- 0
for (i in tols) {
    # i <- tols[1]
    j <- j + 1
    tryCatch(
        expr = {
        Models[[j]] = svm(yR ~ xR, tolerance = i, 
                        kernel = 'linear', 
                            type = 'eps-regression') |>
                predict(type = "response") 
        }, 
        error = function(e) {
            ## do Nothing
        }
    )

}
Models[[j]] <- rep(yR |> mean(), length(xR))

names(Models) <- paste0('Tolerance: ', tols)
dat <- as.data.frame(Models) |> 
        dplyr :: mutate(x = xR)  |> 
        tidyr :: pivot_longer(!x, names_to = "Tolerance", 
                values_to = "SVR_Preds") |> 
                dplyr ::  mutate(Tols = rep(paste0("Tolerance: ", tols), 40))

dat2 = data.frame(x = xR, y = yR)
P <- dat2 |> 
        ggplot(aes(x = x, y = y)) + 
        geom_point(color = "darkblue", 
                size = 5) + 
            geom_line(data = dat, aes(x = x, y = SVR_Preds, 
                    group = Tolerance, color = Tolerance), 
                    linewidth = 1) +
            theme_bw() + 
            theme(legend.position = 'none') + 
            labs(title = "{closest_state}")
P1 <- P + transition_states(Tols) 
animate(P1, renderer = gifski_renderer("Anim.gif", width = 1200, height = 800))

```



![see this gif](Anim.gif)