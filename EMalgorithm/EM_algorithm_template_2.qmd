---
title: EM algorithm Template Code II
format: 
    gfm: 
        toc: true 
warning: false 
fig-height: 9
fig-width: 9
tbl-cap-location: top
---



# Problem I

$$
\begin{aligned}
& X_1, X_2, \dots, X_n \overset{\text{iid}}{\sim} \text{Pois}(\tau_i), \\
& Y_1, Y_2, \dots, Y_n \overset{\text{iid}}{\sim} \text{Pois}(\beta \tau_i), \\
& \text{Dataset}: \biggl[(x_i, y_i) \bigg | i = 1, 2, \dots, n\biggr], \\
& \text{let}~~ x_1 ~\text{is missing, We want to use the EM algorithm for estimation } \bigl(\beta, \tau_1, \dots, \tau_n\bigr)~ 
\end{aligned}
$$





<br><hr><hr> 




```{r}
#| include: false

library (reticulate)
path <- Sys.which("python")
path <- gsub("\\", "//", path, fixed = TRUE)
use_python(path)
```



## Using Python 



```{python}
import numpy as np 
import pandas as pd 
from scipy import stats 

def Gen_data(n, beta, Tau, seed = 1234): 
    x = stats.poisson.rvs(size = n, mu = Tau, random_state = seed)
    y = stats.poisson.rvs(size = n, mu = beta * Tau, random_state = seed)
    return pd.DataFrame({'x': x, 'y': y})

Tau = np.array([1, 1.5, 2, 3, 4, 5, 0.5, 1, 2, 1])
dat = Gen_data(10, 2, Tau)
dat
xx = dat['x'].values
yy = dat['y'].values
xx = xx.astype(float)
xx[0] = np.nan
xx

def EM_2(tau_init, xData, yData, tol = 1e-7, numIter = int(1e+3)): 
    # set Initial values    
    k = 0
    n = len(xData)
    tauk = tau_init
    tauveck = []
    betak = yData.sum() / (np.nansum(xData) + tauk)
    for j in range(n): 
        if j == 0: 
            continue
        temp = (xData[j] + yData[j]) / (betak + 1)
        tauveck.append(temp) 
    listResultk = np.hstack([[betak, tauk], tauveck])
    while True: 
        k += 1
        ## Expectaiton Step
        xData[0] = tauk

        ## Maximization Step 
        betakplus1 = yData.sum() / xData.sum()
        taukplus1 = (tauk + yData[0]) / (betakplus1 + 1)
        tauveckplus1 = list()
        for j in range(n): 
            if j == 0: 
                continue
            temp = (xData[j] + yData[j]) / (betakplus1 + 1)
            tauveckplus1.append(temp) 
        listResultkplu1 = np.hstack([[betakplus1, taukplus1], tauveckplus1])
        temp2 = np.abs(listResultkplu1 - listResultk)
        if (np.all(temp2 < tol) or k >= numIter): 
            final_result = {'Num_Iter': k, 
            'betahat': betakplus1, 
            'tauhat': list(np.hstack([taukplus1, tauveckplus1]))}
            break 
        listResultk = listResultkplu1.copy() 
        tauk = taukplus1
    return final_result        
init_tau = 10
EM_2(tau_init = init_tau, xData = xx, yData = yy, tol = 1e-7, numIter = int(1e+3))
            
```



***
***
***


## R Programming Method I 


```{r}
# define a function for generate data 
Gen_data <- function(n, beta, Tau, seed = 1234) {
    set.seed(seed)
    x <- rpois(n, lambda = Tau)
    y <- rpois(n, lambda = beta * Tau)
    return(data.frame(x = x, y = y))
}

Tau <- c(1, 1.5, 2, 3, 4, 5, 0.5, 1, 2, 1)
dat <- Gen_data(10, 2, Tau)
xx <- dat$x
yy <- dat$y
xx[1] <- NA

EM_2 <- function(tau_init, xData, yData, tol = 1e-7, numIter = 1e+3) {
    # set initialize
    k <- 0
    n <- length(xData)
    tauk <- tau_init
    tauveck <- c()
    betak <- sum(yData, na.rm = TRUE) / (sum(xData, na.rm = TRUE) + tauk)
    for (j in 2:n) {
        temp <- (xData[j] + yData[j]) / (betak + 1)
        tauveck <- c(tauveck, temp)
    }
  # define vector of results for intial step 
  listResultk <- c(betak, tauk, tauveck)

    while (TRUE) {
        # Expetation Step 
        k <- k + 1
        xData[1] <- tauk

        # Maximization Step 
        betakplus1 <- sum(yData) / sum(xData, na.rm = TRUE)
        taukplus1 <- (tauk + yData[1]) / (betakplus1 + 1)
        tauveckplus1 <- c()
        for (j in 2:n) {
            temp <- (xData[j] + yData[j]) / (betakplus1 + 1)
            tauveckplus1 <- c(tauveckplus1, temp)
        }

        # define a vector for gather results 
        listResultkplu1 <- c(betakplus1, taukplus1, tauveckplus1)
        # check condition for stop algorithm 
        temp2 <- abs(listResultkplu1 - listResultk)
        if (all(temp2 < tol) || k >= numIter) {
            final_result <- list('Num_Iter' = k, 'betahat' = betakplus1, 'tauhat' = c(taukplus1, tauveckplus1))
            break
        }
        listResultk <- listResultkplu1
        tauk <- taukplus1
    }

    # return results
    return(final_result)
}

# check function 
init_tau <- 10
EM_2(tau_init = init_tau, xData = xx, yData = yy, tol = 1e-7, numIter = 1e+3)

```



***
***
***


## R Programming Method II

```{r}

set.seed(200)
cr_data <- function(size = 100, tau, beta) {
    samp1 <- rpois(size, lambda = tau)
    samp2 <- rpois(size, lambda = tau * beta)
    return (data.frame(x = samp1, y = samp2))
}

n <- 100
T <- sample(1:100, size = n, replace = TRUE)

dataa <- cr_data(size = n, tau = T, beta = 5)
x <- dataa[['x']]
y <- dataa[['y']]
x[1] <- NA
t0 = 25; sampx = x; sampy = y; tolerance = 1e-9; num = 1e+4
Em_algorithm <- function(t0 = 25, sampx = x, sampy = y, tolerance = 1e-9, num = 1e+4) {
    k <- 0
    n <- length(sampx)
    tk <- t0
    tvec <- numeric((n-1))
    bk <- sum(sampy) / (sum(sampx, na.rm = TRUE) + tk)
    for (j in 2:n) {
        res1 <- (sampx[j] + sampy[j]) / (bk + 1)
        tvec[j-1] <- res1
    }

    tempresult_k <- c(bk, tk, tvec)
    Tempp <- TRUE
    while (Tempp) {
        # Expetation Step 
        k <- k + 1
        sampx[1] <- tk

        # Maximization Step 
        bkp1 <- sum(sampy) / sum(sampx)
        tkp1 <- (tk + sampy[1]) / (bkp1 + 1)
        tvec <- numeric(n-1)
        for (j in 2:n) {
            ress <- (sampy[j] + sampx[j]) / (bkp1 + 1)
            tvec[j-1] <- ress
        }

        # define a vector for gather results 
        tempresult_kp1 <- c(bkp1, tkp1, tvec)
        
        ress2 <- abs(tempresult_k - tempresult_kp1)
        if (all(ress2 < tolerance) || k >= num) {
            FResult <- list('Number_Iteration' = k, 'betahat' = bkp1, 'That' = c(tkp1, tvec) |> 
            setNames(paste0("tauHat", 1:100)))
            Tempp = !Tempp
        }
        tempresult_k <- tempresult_kp1
        tk <- tkp1
    }

    # return results
    return(FResult)
}

# check function 
t0 <- 25
Em_algorithm(t0 = t0, sampx = x, sampy = y, tolerance = 1e-9, num = 1e+4)


```




***
***
***
***



\newpage 

# Problem II

The data used for the example is called faithful implemented in R. It contains
waiting time between eruptions and the duration of the eruption for the Old
Faithful geyser in Yellowstone National Park, Wyoming, USA. From this data,
we use the waiting time part. The histogram of the waifing time resembles the
mixture Gaussian distribution; short and long waiting times. We set indicators
which mixture component each observation belongs to as a missing data and the
EM algorithm will find the proportion of observations belonging to each nor-
mal distribution along with other unknown parameters for means and variances.

$$
f_{\text{W}}(w) = p \times \frac{1}{\sigma_1} \phi\left(\frac{w - \mu_1}{\sigma_1}\right) + (1-p) \times \frac{1}{\sigma_2} \phi\left(\frac{w - \mu_2}{\sigma_2}\right). 
$$


<br> 


And, our unknown parameters are $p, \mu_1, \mu_2, \sigma_1^2, \sigma_2^2$ where $\mu_1$ and $\sigma_1^2$ indicate
the mean and the variance from the normal distribution with the shorter waiting time and $\mu_2$ and $\sigma_2^2$ 
represent the mean and the variance from the longer
waiting time. Our $p$ represents the proportion an observation comes from the
normal distribution with the shorter waiting time. We let $\theta = \biggl(p, \mu_1, \mu_2, \sigma_1^2, \sigma_2^2\biggr)$.

<br> 


The indicator variable as a missing data is




$$
Y_i = 
\begin{cases}1 &  W_i ~~\text{belongs to distribution of shorter waiting times}, \\
0 & W_i~~ \text{belongs to distribution of longer waiting times}
\end{cases} 
$$




where $Y_i$ is Bernoulli distribued with parameter $p$.

<br> 

Therefare the likelihood expression for the complete-data is given by:



$$
L_n(\theta|W, Y) = \prod_{i=1}^{n} p^{Y_i} \times (1-p)^{1-Y_i} \times \frac{1}{\sigma_1^{Y_i}} \times \phi\left(\frac{W_i - \mu_1}{\sigma_1}\right)^{Y_i} \times 
\frac{1}{\sigma_2^{1- Y_i}}\times 
\phi\left( \frac{W_i - \mu_2}{\sigma_2} \right)^{1-Y_i} 
$$



And, the corresponding log-likelihood function for the density from the data
faithful becomes:



$$
\begin{aligned} 
\ell_n(\theta|W, Y) & = \sum_{i = 1}^n Y_i times \log(p) + \sum_{i = 1}^n (1 - Y_i) \times \log(1-p) \\
& - \frac{1}{2} \sum_{i = 1}^n Y_i \times \log(2\pi \sigma_1^2) - \frac{1}{2\sigma_1^2}\sum_{i = 1}^n Y_i\times (W_i-\mu_1)^2 \\
& - \frac{1}{2} \sum_{i = 1}^n (1- Y_i) \times \log(2\pi \sigma_2^2) - \frac{1}{2\sigma_2^2}\sum_{i =1}^n (1-Y_i) \times (W_i - \mu_2)^2. 
\end{aligned}
$$


From now, we apply the EM algorithm and find the expectation of Y_i, Since 
the conditional distribution of Y_i given W is 


$$
Y_i \bigg | W_i, \theta^{(k)} \sim \text{Bin}(1, p_i^{(k)})
$$



With 


$$
p_i^{(k)} = \frac{p^{(k)} \times \frac{1}{\sigma_1^{(k)}\phi\left(\frac{w_i - \mu_1^{(k)}}{\sigma_1^{(k)}}\right)}}{p^{(k)} \times \frac{1}{\sigma_1^{(k)}\phi\left(\frac{w_i - \mu_1^{(k)}}{\sigma_1^{(k)}}\right)} + (1-p^{(k)}) \times \frac{1}{\sigma_2^{(k)}\phi\left(\frac{w_i - \mu_2^{(k)}}{\sigma_2^{(k)}}\right)}}
$$


where $p^{(K)}$ is a set of known or estimated parameters at kth step. $p^{(0)}$ is an initial
values. Thus, by the property of the Binomial distribution, the conditional mean is 


$$
\mathcal{E}(Y_i \bigg | W_i, \theta^{(k)}) = p_i^{(k)}. 
$$


By substituting $p^{(k)}$ for $Y_i$, We obtain the expectaion function as 



$$
\begin{aligned} 
Q\biggl(\theta \bigg | \theta^{(k)}\biggr) = & \sum_{i = 1}^n p_i^{(k)} \times \log(p) + \sum_{i = 1}^n ( 1- p_i^{(k)}) \times \log(1 - p)\\ 
& -\frac{1}{2} \sum_{i = 1}^n p_i^{(k)} \times \log(2\pi \sigma_1^2) - \frac{1}{2\sigma_1^2} \sum_{i = 1}^n p_i^{(k)} \times (W_i - \mu_1)^2\\
& - \frac{1}{2}\sum_{i = 1}^n (1-p_i^{(k)}) \times \log(2\pi\sigma_2^2)-\frac{1}{2\sigma_2^2}\sum_{i = 1}^n (1-pi_i^{(k)}) \times (W_i - \mu_2)^2
\end{aligned}
$$




In the maximization step, setting the first derivatives of $Q\left(\theta\bigg | \theta^{(k)}\right)$ with respect to each parameter equal to zero results in following equations for each parameter.



$$
\begin{aligned}
& p^{(k+1)} = \frac{1}{n} \sum_{i=1}^{n} p_i^{(k)}, \\ 
& \mu_1^{(k+1)} = \frac{\sum_{i=1}^{n} p_i^{(k)} W_i}{\sum_{i=1}^{n} p_i^{(k)}}, \\ 
& \mu_2^{(k+1)} = \frac{\sum_{i=1}^{n}(1 - p_i^{(k)}) W_i}{\sum_{i=1}^{n}(1 - p_i^{(k)})}, \\
& (\sigma_1^2)^{(k+1)} = \frac{\sum_{i=1}^{n}p_i^{(k)} (W_i - \mu_1^{(k+1)})^2}{\sum_{i=1}^{n}p_i^{(k)}},\\
& (\sigma_2^2)^{(k+1)} = \frac{\sum_{i=1}^{n}(1-p_i^{(k)}) (W_i - \mu_2^{(k+1)})^2}{\sum_{i=1}^{n}(1-p_i^{(k)})},
\end{aligned}
$$




```{r}
#| echo: false
#| fig-cap: Histogram of Waiting
#| fig-cap-location: margin

data(faithful)
hist(faithful[['waiting']], col = "gray", main = "")
```

```{r}
#| include: false
em_algorithm <- function(d, val0) {
        # (E-Step)
        E <- val0[1] * dnorm(d, val0[2], sqrt(val0[4])) / 
            (val0[1] * dnorm(d, val0[2], sqrt(val0[4])) + (1 - val0[1]) * 
            dnorm(d, val0[3], sqrt(val0[5])))
    
        # Maximization step 
        valk <- numeric(5)
        valk[1] <- mean(E)
        valk[2] <- sum(E * d) / sum(E) 
        valk[3] <- sum((1-E) * d) / (sum(1-E))
        valk[4] <- sum(E * (d - valk[2]) ** 2) / sum(E)
        valk[5] <- sum((1-E) * (d - valk[3]) ** 2) / sum(1 - E)
        return(valk)
}


Get_EM <- function(Data, s0, tolerance = 1e-4) {
    I <- function() {
        k <<- k + 1
    }
    Temp <- em_algorithm(Data, s0)
    if (all(abs(Temp - s0) < tolerance)) {
        names(Temp) <- c("Pr", "Mu:1", "Mu:2", "Variance:1", "Variance:2")
        return(list(Iter = k, Result = Temp))
    } else {
        I()
        s0 <- Temp 
        Get_EM(Data, s0)
    }

}


x <- faithful$waiting
s0 <- c(0.5, 40, 90, 16, 16)
k <- 0
result <- Get_EM(Data = x, s0 = s0)
ress <- result$Result





## BootStrap section 



result <- Get_EM(Data = x, s0 = s0)$Res 

prob <- result[1] 
m1 <- result[2]
m2 <- result[3]
s1 <- result[4]
s2 <- result[5]

N1 <- round(prob * dim(faithful)[1], 0)
N2 <- dim(faithful)[1] - N1
library(plyr)
Boot_result <- raply(1e+3, {
                pr <- runif(1)
                if (pr <= prob) {
                temp <- rnorm(N1, m1, sqrt(s1))
                c(
                    MEAN = mean(temp), 
                    Variance = var(temp),
                    INDEX = 1
                )
            } else {
                temp <- rnorm(N1, m2, sqrt(s2))
            c(
                MEAN = mean(temp), 
                Variance = var(temp), 
                INDEX = 2
            )   
            }   
        }) |> as.data.frame()


dim(Boot_result)
head(Boot_result)
dat <- Boot_result[, c("MEAN", "Variance")]

temp3 <- aggregate(dat, by = list(Boot_result$INDEX), FUN = mean)
temp2 <- temp3 |> as.vector()
```




After the EM algorithm, our estimates for unknown parameters are described
in the Table 1. In addition, Table2 shows the results form the combination of
EM algorithm and Bootstrap.


<center> 

| $p$ | $\mu_1$ | $\mu_2$ | $\sigma_1^2$ | $\sigma_2^2$ |
|:--------:|:--------:|:--------:|:--------:|:--------:|
| $`r ress[1]`$  | $`r ress[2]`$ | $`r ress[3]`$ | $`r ress[4]`$ | $`r ress[5]`$ | 
: Table.1 &nbsp; Estimate Using the combination of EM Algorithm {tbl-colwidths="[2,25]"}

</center> 

<br><hr>


<center> 

| $\mu_1$ | $\mu_2$ | $\sigma_1^2$ | $\sigma_2^2$ |
|:--------:|:--------:|:--------:|:--------:|
| $`r temp2$MEAN[1]`$  | $`r temp2$Variance[1]`$ | $`r temp2$MEAN[2]`$ | $`r temp2$Variance[2]`$ 
: Table.2 &nbsp; Estimate Using the combination of EM Algorithm and Bootstrap {tbl-colwidths="[2,25]"}

</center> 


***
***
***


## R programm Method I

```{r}
rm(list = ls())

dat <- faithful[['waiting']]

init_values <- c(0.5, 40, 90, 16, 16)


EM <- function(data, Initials) {
    k <- 0
    Sk = Initials
    while (TRUE) {
        # Expectation-Step (E-Step)
        Expect <- Sk[1] * dnorm(data, Sk[2], sqrt(Sk[4])) / 
            (Sk[1] * dnorm(data, Sk[2], sqrt(Sk[4])) + (1 - Sk[1]) * 
            dnorm(data, Sk[3], sqrt(Sk[5])))
    
        # Maximization step (M-Step)
        a1 <- mean(Expect)
        a2 <- sum(Expect * data) / sum(Expect) 
        a3 <- sum((1-Expect) * data) / (sum(1-Expect))
        a4 <- sum(Expect * (data - a2) ** 2) / sum(Expect)
        a5 <- sum((1-Expect) * (data - a3) ** 2) / sum(1 - Expect)
        Skp1 <- c(a1, a2, a3, a4, a5)
        temp <- abs(Sk - Skp1)
        if(all(temp < 1e-4)) break 
        Sk <- Skp1
        k <- k + 1
    }
    names(Skp1) <- c("Prob", "mu1", "mu2", "sigma2_1", "sigma2_2")
    list(Number_Iteration = k, Result = Skp1)
}


EM(dat, init_values)


## BootStrap section 


P <- EM(dat, init_values) |> 
        _$Result

pr1 <- P[1] 
pr2 <- P[2]
pr3 <- P[3]
pr4 <- P[4]
pr5 <- P[5]

n1 <- (pr1 * nrow(faithful)) |> floor()
n2 <- nrow(faithful) - n1 
boot_fun <- function(B) {
    f1 <- function() {
        u <- runif(1) 
        if (u <= pr1) {
            b <- rnorm(n1, pr2, sqrt(pr4))
            bmean <- mean(b) 
            bvar <- var(b)
            ID <- 1
        } else {
            b <- rnorm(n2, pr3, sqrt(pr5))
            bmean <- mean(b) 
            bvar <- var(b)
            ID <- 2
        }
        return(c(bmean, bvar, ID))
    }
    Result <- replicate(B, f1())
    return(Result)
}
res <- boot_fun(1e+3) |> 
        t() |> 
        as.data.frame() |> 
        setNames(c("Mean", "Variance", "ID"))

res |> 
    dplyr :: group_by(ID) |> 
        dplyr :: summarize(Mean = mean(Mean), Variance = mean(Variance))

```




***
***
***



## R programm Method II

```{r}
rm(list = ls())

em_algorithm <- function(d, val0) {
        # (E-Step)
        E <- val0[1] * dnorm(d, val0[2], sqrt(val0[4])) / 
            (val0[1] * dnorm(d, val0[2], sqrt(val0[4])) + (1 - val0[1]) * 
            dnorm(d, val0[3], sqrt(val0[5])))
    
        # (M-Step) 
        valk <- numeric(5)
        valk[1] <- mean(E)
        valk[2] <- sum(E * d) / sum(E) 
        valk[3] <- sum((1-E) * d) / (sum(1-E))
        valk[4] <- sum(E * (d - valk[2]) ** 2) / sum(E)
        valk[5] <- sum((1-E) * (d - valk[3]) ** 2) / sum(1 - E)
        return(valk)
}


Get_EM <- function(Data, s0, tolerance = 1e-4) {
    I <- function() {
        k <<- k + 1
    }
    Temp <- em_algorithm(Data, s0)
    if (all(abs(Temp - s0) < tolerance)) {
        names(Temp) <- c("Pr", "Mu:1", "Mu:2", "Variance:1", "Variance:2")
        return(list(Iter = k, Res = Temp))
    } else {
        I()
        s0 <- Temp 
        Get_EM(Data, s0)
    }

}


x <- faithful$waiting
s0 <- c(0.5, 40, 90, 16, 16)
k <- 0
Get_EM(Data = x, s0 = s0)



## BootStrap section 
result <- Get_EM(Data = x, s0 = s0)$Res 

prob <- result[1] 
m1 <- result[2]
m2 <- result[3]
s1 <- result[4]
s2 <- result[5]

N1 <- round(prob * dim(faithful)[1], 0)
N2 <- dim(faithful)[1] - N1
library(plyr)
Boot_result <- raply(1e+3, {
                pr <- runif(1)
                if (pr <= prob) {
                temp <- rnorm(N1, m1, sqrt(s1))
                c(
                    MEAN = mean(temp), 
                    Variance = var(temp),
                    INDEX = 1
                )
            } else {
                temp <- rnorm(N1, m2, sqrt(s2))
            c(
                MEAN = mean(temp), 
                Variance = var(temp), 
                INDEX = 2
            )   
            }   
        }) |> as.data.frame()


dim(Boot_result)
head(Boot_result)
dat <- Boot_result[, c("MEAN", "Variance")]

aggregate(dat, by = list(Boot_result$INDEX), FUN = mean)
```

